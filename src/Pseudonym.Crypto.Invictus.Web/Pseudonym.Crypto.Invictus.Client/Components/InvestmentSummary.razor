@inject IAppState AppState
@inject IUserSettings UserSettings

<Header Fund="Investment.Fund" Link="Link" ShowGraph="ShowGraph">
    <Content>
        <div class="container-fluid" style="max-width: none">
            <div class="row">
                <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto" style="min-width: 200px; padding-bottom: 15px;">
                    <small style="font-weight: bold;">Token</small>
                    <div>
                        <Token Symbol="@Investment.Fund.Token.Symbol.ToString()" ContractAddress="@Investment.Fund.Token.Address" />
                    </div>
                </div>
                <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto" style="min-width: 200px; padding-bottom: 15px;">
                    <small style="font-weight: bold;">Held</small>
                    <div>
                        <LargeNumber Value="Investment.Held" Decimals="2" />
                    </div>
                </div>
                <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto" style="min-width: 200px; padding-bottom: 15px;">
                    <small style="font-weight: bold;">Net Value (@UserSettings.CurrencyCode.GetSymbol())</small>
                    <div>
                        <Money Value="Investment.RealValue" CurrencyCode="UserSettings.CurrencyCode" />
                        @if (NetProfit.HasValue)
                        {
                            <ProfitTag Value="NetProfit.Value" Decimals="2" />
                        }
                    </div>
                </div>
                <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto" style="min-width: 200px; padding-bottom: 15px;">
                    <small style="font-weight: bold;">Share</small>
                    <div>
                        <LargeNumber Value="Investment.Share" Decimals="2" Suffix="%" />
                    </div>
                </div>
                @if (Investment.Fund.Market.IsTradeable)
                {
                    <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto" style="min-width: 200px; padding-bottom: 15px;">
                        <small style="font-weight: bold;">Market Value (@UserSettings.CurrencyCode.GetSymbol())</small>
                        <div>
                            <Money Value="Investment.MarketValue ?? 0" CurrencyCode="UserSettings.CurrencyCode" />
                            @if (MarketProfit.HasValue)
                            {
                                <ProfitTag Value="MarketProfit.Value" Decimals="2" />
                            }
                        </div>
                    </div>
                }
                @if (Investment.SubInvestments.Any())
                {
                    <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto" style="min-width: 200px; padding-bottom: 15px;">
                        <small style="font-weight: bold;">Additional Value (@UserSettings.CurrencyCode.GetSymbol())</small>
                        <div>
                            <Money Value="Investment.SubInvestments.Sum(si => si.MarketValue)" CurrencyCode="UserSettings.CurrencyCode" />
                            <Help Title="Additional Value" Content="Additional Value is the combined total of any assets this fund holds that you also hold as an individual investment external to the fund." />
                        </div>
                    </div>
                }
            </div>
        </div>
    </Content>
    <Chart>
        <InvestmentTimelineChart Funds="new List<ApiFund>() { Investment.Fund }" Stakes="Investment.Stakes" Transactions="Transactions" ClickCallback="ClickCallback" @ref="chart" />
    </Chart>
</Header>

@code {

    private InvestmentTimelineChart chart;

    [Parameter]
    public ApiInvestment Investment { get; set; }

    [Parameter]
    public List<BusinessTransaction> Transactions { get; set; }

    [Parameter]
    public bool Clickable { get; set; }

    [Parameter]
    public bool ShowGraph { get; set; }

    [Parameter]
    public EventCallback<BusinessTransaction> ClickCallback { get; set; }

    protected decimal? NetProfit => Transactions
        ?.Where(x => x.Price != null)
        ?.Select(t => t.GetTrade(Investment.Fund, UserSettings))
        ?.Where(t => !t.IsStake)
        ?.Sum(t => t.NetDiff);

    protected decimal? MarketProfit => Transactions
        ?.Where(x => x.Price != null)
        ?.Select(t => t.GetTrade(Investment.Fund, UserSettings))
        ?.Where(t => !t.IsStake)
        ?.Sum(t => t.MarketDiff ?? decimal.Zero);

    protected Uri Link => Clickable
        ? new Uri($"investments/{Investment.Fund.Token.Symbol}", UriKind.Relative)
        : null;

    public async Task StateHasChangedAsync()
    {
        StateHasChanged();

        if (chart != null)
        {
            await chart.DrawAsync(false, true);
        }
    }

    protected override void OnInitialized()
    {
        AppState.Assign(async () => await StateHasChangedAsync());
    }
}

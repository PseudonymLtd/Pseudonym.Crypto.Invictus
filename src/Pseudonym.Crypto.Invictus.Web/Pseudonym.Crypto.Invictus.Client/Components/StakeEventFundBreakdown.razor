@inject IAppState AppState
@inject IUserSettings UserSettings

<div class="jumbotron jumbotron-fluid">
    <div class="container" style="padding-top: 12px; padding-bottom: 12px; border: 1px solid transparent;">
        <h1 class="display-4">@Stake.Token.Symbol Staking Events</h1>
        <p class="lead text-justify text-sm-left">
            <span>You will currently earn a</span>
            <LargeNumber Value="RelativePercentage" Suffix="%" ShowZeroValue="true" Decimals="4" />
            <span>share of @Stake.Token.Symbol at each distribution.</span>
        </p>
        <div class="container-fluid" style="max-width: none">
            <div class="row">
                <div class="col-sm-12 col-md-6 py-1 pr-0 pr-md-5">
                    @if (Events.Any())
                    {
                        <StakeTokenAccrualChart Fund="Fund" Stake="Stake" StakeEvents="Events" />
                    }
                    else
                    {
                        <img src="images/@(Stake.Token.Symbol)_Splash.png" class="invisible-mob" alt="You have not staked." style="margin-bottom: 20px; margin-left: -20px;" />
                    }
                </div>
                <div class="col-sm-12 col-md-6 py-1">
                    @if (Events.Any())
                    {
                        <div class="container-fluid" style="max-width: none">
                            <div class="row">
                                <div class="col-4 col-sm-3 py-1 pl-0 pr-4 invisible-mob" style="font-weight: bold;">
                                    Date
                                </div>
                                <div class="col-4 col-sm-3 py-1 pl-0 pr-4" style="font-weight: bold;">
                                    Quantity
                                </div>
                                <div class="col-4 col-sm-3 py-1 pl-0 pr-4" style="font-weight: bold;">
                                    Power (@UserSettings.CurrencyCode.GetSymbol())
                                </div>
                                <div class="col-4 col-sm-3 py-1 px-0" style="font-weight: bold;">
                                    Type
                                </div>
                            </div>
                        </div>
                        @foreach (var eventItem in Events.OrderBy(x => x.ConfirmedAt))
                        {
                            <StakeEventFundBanner Fund="Fund" Event="eventItem" />
                        }
                        <div class="container-fluid" style="max-width: none">
                            <div class="row">
                                <div class="col-4 col-sm-3 py-1 pl-0 pr-4 invisible-mob" style="font-weight: bold;">
                                </div>
                                <div class="col-4 col-sm-3 py-1 pl-0 pr-4" style="font-weight: bold;">
                                </div>
                                <div class="col-4 col-sm-3 py-1 pl-0 pr-4" style="font-weight: bold;">
                                    Total
                                </div>
                                <div class="col-4 col-sm-3 py-1 px-0" style="font-weight: bold;">
                                    <Money Value="Power" Decimals="2" ShowZeroValue="true" CurrencyCode="UserSettings.CurrencyCode" />
                                </div>
                            </div>
                        </div>
                    }
                    <div class="form-group" style="margin-bottom: 12px; padding-top: 24px;">
                        <small style="margin-top: -12px; position: absolute; font-size: x-small; color: #6c757d;">
                            @StakingHelper.StartDate.AddMinutes(StakingHelper.IntervalMinutes * Intervals).ToString("F", DateTimeFormatInfo.InvariantInfo)
                        </small>
                        <label for="intervals">
                            @Math.Round(TimeSpan.FromMinutes(StakingHelper.IntervalMinutes * Intervals).TotalDays, 2) Day(s) since inception
                        </label>
                        <input type="range" class="form-control-range" value="@Intervals" id="intervals" min="@Min" max="@Max" step="1" @oninput="IntervalChanged">
                    </div>
                    <div class="container-fluid" style="max-width: none">
                        <div class="row">
                            <div class="col py-1" style="font-weight: bold;">
                                Projected <Token Symbol="@Stake.Token.Symbol.ToString()" ContractAddress="@Stake.Token.Address" />
                            </div>
                            <div class="col py-1" style="font-weight: bold;">
                                Projected Value (@UserSettings.CurrencyCode.GetSymbol())
                            </div>
                        </div>
                        <div class="row">
                            <div class="col py-1">
                                <LargeNumber Value="@ICAP" Decimals="2" />
                            </div>
                            <div class="col py-1">
                                <Money Value="@(ICAP * Stake.Market.PricePerToken)" Decimals="2" CurrencyCode="UserSettings.CurrencyCode" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <a href="stakes/@Stake.Token.Symbol"
           class="btn btn-primary btn-lg @Stake.Token.Symbol.ToString().ToLower()"
           role="button"
           style="display: block; max-width: 200px; margin: auto;">Explore @Stake.Token.Symbol</a>
    </div>
</div>


@code {

    [Parameter]
    public ApiFund Fund { get; set; }

    [Parameter]
    public ApiStake Stake { get; set; }

    [Parameter]
    public IReadOnlyList<ApiStakeEvent> Events { get; set; }

    protected decimal Power { get; private set; }

    protected decimal RelativePercentage => (Power / Stake.Power.Power) * 100;

    protected int Max => (int)((StakingHelper.NormalizeDate(DateTime.UtcNow).AddYears(2) - StakingHelper.StartDate).TotalHours * 2);

    protected int Min => ((int)(StakingHelper.NormalizeDate(DateTime.UtcNow) - StakingHelper.StartDate).TotalHours * 2);

    protected int Intervals { get; set; }

    protected decimal ICAP { get; set; }

    protected override void OnInitialized()
    {
        AppState.Assign(() => Draw(false));

        Draw(true);
    }

    protected void IntervalChanged(ChangeEventArgs e)
    {
        Intervals = Convert.ToInt32(e.Value?.ToString() ?? "1");

        ICAP = StakingHelper.CalculateEarnings(Stake, Fund, Events, Intervals);
    }

    private void Draw(bool firstRender)
    {
        Power = decimal.Zero;

        foreach (var eventItem in Events)
        {
            Power += StakingHelper.CalculatePowerDifference(Stake, Fund, Events, eventItem);
        }

        Intervals = Min;

        ICAP = StakingHelper.CalculateEarnings(Stake, Fund, Events, Intervals);
    }
}

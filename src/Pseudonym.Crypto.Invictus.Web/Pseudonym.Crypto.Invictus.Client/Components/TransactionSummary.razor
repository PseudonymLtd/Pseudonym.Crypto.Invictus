@inject IAppState AppState
@inject IUserSettings UserSettings

<div class="jumbotron jumbotron-fluid" style="padding-top: 1rem; padding-bottom: 1rem;">
    <div class="container">
        <div style="margin-top: auto; margin-bottom: auto; padding-bottom: 6px;" data-toggle="collapse" href="#@CollapseId" role="button" aria-expanded="false" aria-controls="@CollapseId">
            <blockquote class="blockquote">
                <h4 style="padding-bottom: 0px; margin-bottom: 0px;">
                    <img src="images/funds/@FundImageName" class="mr-1 mb-1" height="50" width="50" alt="@Fund.DisplayName">
                    <span style="padding-left: 2px;">Tx @Transaction.ConfirmedAt.ToString("F", DateTimeFormatInfo.InvariantInfo)</span>
                    <TransactionStatus Success="Transaction.Success" Confirmations="Transaction.Confirmations" />
                </h4>
                <footer class="blockquote-footer">
                    @if (Transaction.Price != null)
                    {
                        if (Transaction.IsSwap(Fund.Token.Address))
                        {
                            var outboundSwap = Transaction.GetSwap(Fund.Token.Address, TransferAction.Outbound);
                            var inboundSwap = Transaction.GetSwap(Fund.Token.Address, TransferAction.Inbound);

                            <span>
                                Swap
                                <LargeNumber Value="outboundSwap.Quantity" Decimals="2" ShowZeroValue="true" />
                                @outboundSwap.Contract.Symbol
                                For
                                <LargeNumber Value="inboundSwap.Quantity" Decimals="2" ShowZeroValue="true" />
                                @inboundSwap.Contract.Symbol
                            </span>

                            var fundSwap = inboundSwap.Contract.Address == Fund.Token.Address
                                ? inboundSwap
                                : outboundSwap;

                            var netSnapshotPrice = Transaction.Price.NetAssetValuePerToken * fundSwap.Quantity;
                            var netPrice = Fund.NetAssetValuePerToken * fundSwap.Quantity;

                            var diff = Transaction.IsInbound(Fund.Token.Address)
                                ? netPrice - netSnapshotPrice
                                : netSnapshotPrice - netPrice;

                            <span>
                                NET
                                <Money Value="netSnapshotPrice" Decimals="2" ShowZeroValue="true" />
                                <ProfitTag Value="diff" Decimals="2" />
                            </span>

                            if (Fund.Market.IsTradeable)
                            {
                                var marketSnapshotPrice = fundSwap.PricePerToken * fundSwap.Quantity;
                                var marketPrice = Fund.Market.PricePerToken * fundSwap.Quantity;

                                var marketDiff = Transaction.IsInbound(Fund.Token.Address)
                                    ? marketPrice - marketSnapshotPrice
                                    : marketSnapshotPrice - marketPrice;

                                <span>
                                    MKT
                                    <Money Value="marketSnapshotPrice" Decimals="2" ShowZeroValue="true" />
                                    <ProfitTag Value="marketDiff" Decimals="2" />
                                </span>
                            }
                        }
                        else
                        {
                            <span>
                                @(Transaction.IsInbound(Fund.Token.Address) ? "Buy" : "Sell")
                                <LargeNumber Value="Transaction.GetTransferQuantity(Fund.Token.Address, Transaction.TransferAction)" Decimals="2" ShowZeroValue="true" />
                                @Fund.Token.Symbol
                            </span>

                            var quantity = Transaction.GetTransferQuantity(Fund.Token.Address, Transaction.TransferAction);
                            var netSnapshotPrice = Transaction.Price.NetAssetValuePerToken * quantity;
                            var netPrice = Fund.NetAssetValuePerToken * quantity;

                            var diff = Transaction.IsInbound(Fund.Token.Address)
                                ? netPrice - netSnapshotPrice
                                : netSnapshotPrice - netPrice;

                            <span>
                                NET
                                <Money Value="netSnapshotPrice" Decimals="2" ShowZeroValue="true" />
                                <ProfitTag Value="diff" Decimals="2" />
                            </span>

                            if (Fund.Market.IsTradeable)
                            {
                                var marketSnapshotPrice = Transaction.GetTransferPrice(Fund.Token.Address, Transaction.TransferAction);
                                var marketPrice = Fund.Market.PricePerToken * quantity;

                                var marketDiff = Transaction.IsInbound(Fund.Token.Address)
                                    ? marketPrice - marketSnapshotPrice
                                    : marketSnapshotPrice - marketPrice;

                                <span>
                                    MKT
                                    <Money Value="marketSnapshotPrice" Decimals="2" ShowZeroValue="true" />
                                    <ProfitTag Value="marketDiff" Decimals="2" />
                                </span>
                            }
                        }
                    }
                    else
                    {
                        <Awaiting Symbol="Fund.Token.Symbol" />
                    }
                </footer>
            </blockquote>
        </div>
        <div class="collapse" id="@CollapseId">
            <p class="lead">
                <BlockNumber Number="@Transaction.BlockNumber" FontSize="18" />
                <EthTransactionHash Hash="@Transaction.Hash" FontSize="18" />
            </p>
            <div class="media" style="padding-top: 12px; padding-bottom: 12px; border: 1px solid transparent;">
                <div class="container-fluid" style="max-width: none; padding-left: 0px; padding-right: 0px">
                    <div class="row">
                        <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto py-1">
                            <small style="font-weight: bold;">Transfer</small>
                            <div>
                                <EthAddress Address="@Transaction.Sender" />
                                <span class="invisible-mob">➔</span>
                                <EthAddress Address="@Transaction.Recipient" />
                            </div>
                        </div>
                        <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto py-1">
                            <small style="font-weight: bold;">Eth</small>
                            <div>
                                <LargeNumber Value="@Transaction.Eth" Decimals="2" />
                            </div>
                        </div>
                        <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto py-1">
                            <small style="font-weight: bold;">Gas</small>
                            <div>
                                <TooltipItem DisplayText="@($"{Transaction.Gas} / {Transaction.GasLimit}")" CaptionText="@($"{Math.Round(Transaction.GasUsed, 2)}%")" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div style="padding-top: 12px; padding-bottom: 12px; border: 1px solid transparent;">
                @foreach (var operation in Transaction.Operations)
                {
                    <OperationSummary Operation="operation" />
                }
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public ApiFund Fund { get; set; }

    [Parameter]
    public BusinessTransaction Transaction { get; set; }

    [Parameter]
    public bool Clickable { get; set; }

    public string FundImageName => $"{Fund.Token.Symbol}.png";

    internal string CollapseId => $"Id-{Transaction.Hash}";

    protected override void OnInitialized()
    {
        AppState.Assign(StateHasChanged);
    }
}

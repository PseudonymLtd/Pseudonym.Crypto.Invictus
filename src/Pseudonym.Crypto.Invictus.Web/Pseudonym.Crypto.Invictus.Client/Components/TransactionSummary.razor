@inject IAppState AppState
@inject IUserSettings UserSettings

<div class="jumbotron jumbotron-fluid" style="padding-top: 1rem; padding-bottom: 1rem;">
    <div class="container">
        <div style="margin-top: auto; margin-bottom: auto; padding-bottom: 6px;" data-toggle="collapse" href="#@CollapseId" role="button" aria-expanded="false" aria-controls="@CollapseId">
            <blockquote class="blockquote">
                <h4 style="padding-bottom: 0px; margin-bottom: 0px;">
                    <img src="images/funds/@FundImageName" class="mr-1 mb-1" height="50" width="50" alt="@Fund.DisplayName">
                    <span style="padding-left: 2px;">Tx @Transaction.ConfirmedAt.ToString("F", DateTimeFormatInfo.InvariantInfo)</span>
                    <TransactionStatus Success="Transaction.Success" Confirmations="Transaction.Confirmations" />
                </h4>
                <footer class="blockquote-footer">
                    @if (Transaction.Price != null)
                    {
                        if (Transaction.IsSwap())
                        {
                            var swap = Transaction.GetSwapData(Fund);

                            <span>
                                Swap
                                <LargeNumber Value="swap.OutboundQuantity" Decimals="2" ShowZeroValue="true" />
                                <small>@swap.OutboundSymbol</small>
                                &rarr;
                                <LargeNumber Value="swap.InboundQuantity" Decimals="2" ShowZeroValue="true" />
                                <small>@swap.InboundSymbol</small>
                            </span>
                            <span>
                                NET
                                <Money Value="swap.NetSnapshotPrice" CurrencyCode="UserSettings.CurrencyCode" Decimals="2" ShowZeroValue="true" />
                                <ProfitTag Value="swap.NetDiff" Decimals="2" />
                            </span>

                            if (swap.IsTradeable)
                            {
                                <span>
                                    MKT
                                    <Money Value="swap.MarketSnapshotPrice.Value" CurrencyCode="UserSettings.CurrencyCode" Decimals="2" ShowZeroValue="true" />
                                    <ProfitTag Value="swap.MarketDiff.Value" Decimals="2" />
                                </span>
                            }
                        }
                        else
                        {
                            var trade = Transaction.GetTradeData(Fund, UserSettings);

                            <span>
                                @(trade.IsInbound
                                    ? trade.IsOwned 
                                        ? "Transfer In"
                                        : "Buy"
                                    : trade.IsOwned
                                        ? "Transfer Out"
                                        : trade.IsStake
                                            ? "Stake"
                                            : "Sell")
                                <LargeNumber Value="trade.Quantity" Decimals="2" ShowZeroValue="true" />
                                <small>@Fund.Token.Symbol</small>
                            </span>
                            <span>
                                NET
                                <Money Value="trade.NetSnapshotPrice" CurrencyCode="UserSettings.CurrencyCode" Decimals="2" ShowZeroValue="true" />
                                @if (!trade.IsStake)
                                {
                                    <ProfitTag Value="trade.NetDiff" Decimals="2" />
                                }
                            </span>

                            if (trade.IsTradeable)
                            {
                                <span>
                                    MKT
                                    <Money Value="trade.MarketSnapshotPrice.Value" CurrencyCode="UserSettings.CurrencyCode" Decimals="2" ShowZeroValue="true" />
                                    @if (!trade.IsStake)
                                    {
                                        <ProfitTag Value="trade.MarketDiff.Value" Decimals="2" />
                                    }
                                </span>
                            }
                        }
                    }
                    else
                    {
                        <Awaiting Symbol="Fund.Token.Symbol" />
                    }
                </footer>
            </blockquote>
        </div>
        <div class="collapse" id="@CollapseId">
            <p class="lead">
                <BlockNumber Number="@Transaction.BlockNumber" FontSize="18" />
                <EthTransactionHash Hash="@Transaction.Hash" FontSize="18" />
            </p>
            <div class="media" style="padding-top: 12px; padding-bottom: 12px; border: 1px solid transparent;">
                <div class="container-fluid" style="max-width: none; padding-left: 0px; padding-right: 0px">
                    <div class="row">
                        <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto py-1">
                            <small style="font-weight: bold;">Transfer</small>
                            <div>
                                <EthAddress Address="@Transaction.Sender" />
                                <span class="invisible-mob">&rarr;</span>
                                <EthAddress Address="@Transaction.Recipient" />
                            </div>
                        </div>
                        <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto py-1">
                            <small style="font-weight: bold;">Eth</small>
                            <div>
                                <LargeNumber Value="@Transaction.Eth" Decimals="2" />
                            </div>
                        </div>
                        <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto py-1">
                            <small style="font-weight: bold;">Gas</small>
                            <div>
                                <TooltipItem DisplayText="@($"{Transaction.Gas} / {Transaction.GasLimit}")" CaptionText="@($"{Math.Round(Transaction.GasUsed, 2)}%")" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div style="padding-top: 12px; padding-bottom: 12px; border: 1px solid transparent;">
                @foreach (var operation in Transaction.Operations)
                {
                    <OperationSummary Operation="operation" />
                }
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public ApiFund Fund { get; set; }

    [Parameter]
    public BusinessTransaction Transaction { get; set; }

    [Parameter]
    public string CollapseId { get; set; }

    public string FundImageName => $"{Fund.Token.Symbol}.png";

    protected override void OnInitialized()
    {
        AppState.Assign(StateHasChanged);
    }
}

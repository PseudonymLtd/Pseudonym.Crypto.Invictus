@inject IAppState AppState

@if (Value == decimal.Zero)
{
    <div style="display: inline-block; position: relative;">
        <span style="@TextStyle">@GetZeroValue()</span>
    </div>
}
else if (GetRoundedNumber().Length < GetFullNumber().Length)
{
    <TooltipItem DisplayText="@(GetRoundedNumber() + Suffix)" CaptionText="@(GetFullNumber() + Suffix)" FontSize="FontSize" ToolTipFontSize="ToolTipFontSize" />
}
else
{
    <div style="display: inline-block; position: relative;">
        <span style="@TextStyle">@GetFullNumber()@Suffix</span>
    </div>
}

@code {
    [Parameter]
    public decimal Value { get; set; }

    [Parameter]
    public int Decimals { get; set; } = 0;

    [Parameter]
    public string Suffix { get; set; }

    [Parameter]
    public bool ShowZeroValue { get; set; }

    [Parameter]
    public int? FontSize { get; set; }

    [Parameter]
    public int? ToolTipFontSize { get; set; }

    internal string TextStyle => FontSize.HasValue
        ? $"font-size: {FontSize}px;"
        : string.Empty;

    internal string TooltipStyle => ToolTipFontSize.HasValue
        ? $"font-size: {ToolTipFontSize}px;"
        : string.Empty;

    protected override void OnInitialized()
    {
        AppState.Assign(StateHasChanged);
    }

    private string GetZeroValue()
    {
        if (ShowZeroValue)
        {
            return Decimals > 0
                ? "0.".PadRight(Decimals + 2, '0')
                : "0";
        }
        else
        {
            return "-";
        }
    }

    private string GetRoundedNumber()
    {
        var number = Value.ToCommaFormat(Decimals);
        var index = number.IndexOf('.') + Decimals + 1;

        if (number.Contains('.'))
        {
            return number.Substring(0, Math.Min(index, number.Length));
        }
        else
        {
            number = Decimals > 0
                ? number + "."
                : number;

            return number.PadRight(Decimals + number.Length, '0');
        }
    }

    private string GetFullNumber()
    {
        var number = Value.ToCommaFormat();

        if (number.Contains('.'))
        {
            var index = number.IndexOf('.') + Decimals + 1;

            var decimalEnd = Math.Min(index, number.Length);

            return string.Format(
                "{0}{1}",
                number.Substring(0, decimalEnd),
                number.Length > decimalEnd
                    ? number.Substring(decimalEnd).TrimEnd('0')
                    : string.Empty);
        }
        else
        {
            return number;
        }
    }
}

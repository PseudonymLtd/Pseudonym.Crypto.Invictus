@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.LineChart
@inject IUserSettings UserSettings
@inject IApiClient ApiClient
@inject IAppState AppState
@inject NavigationManager NavigationManager

<DateRangePicker 
    MinDate="DateTimeOffset.UtcNow.AddYears(-3)"
    MaxDate="DateTimeOffset.UtcNow"
    StartDate="StartDate"
    EndDate="EndDate"
    Culture="CultureInfo.CurrentUICulture"
    ApplyButtonClasses="@Fund.Token.Symbol.ToString().ToLower()"
    OnRangeSelect="OnRangeSelectAsync"
    class="form-control form-control-sm date-picker" />
<div style="max-width: 100%; max-height: @($"{Height}px"); margin-bottom: 40px;">
    <ChartJsLineChart Config="config" Width="Width" Height="Height" @ref="chart" />
</div>

@code {

    private readonly LineConfig config;
    private readonly LineDataset<TimeTuple<decimal>> lineDataset;
    private ChartJsLineChart chart;

    public FundPerformanceChart()
    {
        EndDate = DateTimeOffset.UtcNow;
        StartDate = EndDate.Value.AddYears(-1);

        config = new LineConfig()
        {
            Options = new LineOptions()
            {
                ShowLines = true,
                SpanGaps = true,
                Hover = new LineOptionsHover()
                {
                    DisplayColors = true,
                    Enabled = true,
                    Intersect = true,
                    Mode = InteractionMode.Y,
                },
                Scales = new Scales()
                {
                    xAxes = new List<CartesianAxis>()
                {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Hour,
                                TooltipFormat = "DD-MM-YYYY HH",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Date"
                            }
                        }
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips()
                {
                    DisplayColors = true,
                    Intersect = false,
                    Mode = InteractionMode.Nearest,
                },
                MaintainAspectRatio = false,
                Title = new OptionsTitle()
                {
                    Display = !string.IsNullOrEmpty(SubTitle),
                    Text = new IndexableOption<string>(SubTitle),
                },
                Animation = new Animation()
                {
                    Duration = 1000,
                    Easing = Easing.EaseInOutExpo
                },
                ResponsiveAnimationDuration = 1000
            }
        };

        lineDataset = new LineDataset<TimeTuple<decimal>>
        {
            Fill = false,
            BorderWidth = 2,
            PointRadius = 1,
            PointHoverRadius = 3,
            PointBorderWidth = 1,
            PointHoverBorderWidth = 1,
            SteppedLine = SteppedLine.False,
            LineTension = 0
        };

        config.Data.Datasets.Add(lineDataset);
    }

    [Parameter]
    public int Height { get; set; } = 300;

    [Parameter]
    public int Width { get; set; } = 2000;

    [Parameter]
    public string SubTitle { get; set; } = string.Empty;

    [Parameter]
    public ApiFund Fund { get; set; }

    protected DateTimeOffset? StartDate { get; private set; }

    protected DateTimeOffset? EndDate { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        AppState.Assign(async () => await DrawAsync(false));

        lineDataset.Label = $"Nav ({UserSettings.CurrencyCode.GetSymbol()})";
        lineDataset.BackgroundColor = ColorUtil.FromDrawingColor(FundColours.GetByFund(Fund.Token.Symbol));
        lineDataset.BorderColor = ColorUtil.FromDrawingColor(FundColours.GetByFund(Fund.Token.Symbol));

        await DrawAsync(true);
    }

    private async Task DrawAsync(bool firstRender)
    {
        if (!firstRender)
        {
            lineDataset.RemoveAll(x => true);
        }

        await foreach (var perf in ApiClient.ListFundPerformanceAsync(Fund.Token.Symbol, StartDate.Value.UtcDateTime, EndDate.Value.UtcDateTime))
        {
            lineDataset.Add(new TimeTuple<decimal>(new Moment(perf.Date), perf.NetAssetValuePerToken));
        }

        await chart.Update();

        StateHasChanged();
    }

    public async Task OnRangeSelectAsync(DateRange range)
    {
        StartDate = range.Start;
        EndDate = range.End;

        await DrawAsync(false);
    }
}

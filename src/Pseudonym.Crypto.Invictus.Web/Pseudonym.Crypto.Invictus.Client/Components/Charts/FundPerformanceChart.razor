@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.LineChart
@inject IUserSettings UserSettings
@inject IApiClient ApiClient
@inject IAppState AppState
@inject NavigationManager NavigationManager

<div>
    <div>
        <DateRangePicker MinDate="DateTimeOffset.UtcNow.AddYears(-1)"
                            MaxDate="DateTimeOffset.UtcNow"
                            StartDate="StartDate"
                            EndDate="EndDate"
                            Culture="CultureInfo.CurrentUICulture"
                            ApplyButtonClasses="@Fund.Token.Symbol.ToString().ToLower()"
                            OnRangeSelect="OnRangeSelectAsync"
                            class="form-control form-control-sm date-picker" />
        <ul class="pagination pagination-sm price-mode" style="margin-right: -10px;">
            @foreach (PriceMode val in Enum.GetValues(typeof(PriceMode)).Cast<PriceMode>().Where(pm => pm != PriceMode.Raw))
            {
                <li class="page-item @(Mode == val ? "active" : string.Empty)" style="cursor: pointer">
                    <span class="page-link @($"{Fund.Token.Symbol.ToString().ToLower()}{(Mode == val ? string.Empty : "-text")}")" @onclick="async (e) => await OnClickAsync(val)">
                        @val.ToString()
                        <span class="sr-only">(@val.ToString())</span>
                    </span>
                </li>
            }
        </ul>
    </div>
    <div style="max-width: 100%; max-height: @($"{Height}px"); margin-bottom: 40px;">
        <div style="position: relative;">
            @if (!navDataset.Data.Any())
            {
                <div style="position: absolute; width: 100%; height: 100%; text-align: center; padding: 100px 0;">
                    <Awaiting Symbol="Fund.Token.Symbol" />
                </div>
            }
            <ChartJsLineChart Config="config" Width="Width" Height="Height" @ref="chart" />
        </div>
    </div>
</div>

@code {

    private readonly LineConfig config;
    private readonly LineDataset<TimeTuple<decimal>> navDataset;
    private readonly LineDataset<TimeTuple<decimal>> marketDataset;
    private ChartJsLineChart chart;

    public FundPerformanceChart()
    {
        Mode = PriceMode.Avg;
        EndDate = DateTimeOffset.UtcNow;
        StartDate = EndDate.Value.AddYears(-1);

        config = new LineConfig()
        {
            Options = new LineOptions()
            {
                ShowLines = true,
                SpanGaps = true,
                Hover = new LineOptionsHover()
                {
                    DisplayColors = true,
                    Enabled = true,
                    Intersect = true,
                    Mode = InteractionMode.Y,
                },
                Scales = new Scales()
                {
                    xAxes = new List<CartesianAxis>()
                {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Hour,
                                TooltipFormat = "DD-MM-YYYY",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel()
                        }
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips()
                {
                    DisplayColors = true,
                    Intersect = false,
                    Mode = InteractionMode.Nearest,
                },
                MaintainAspectRatio = false,
                Title = new OptionsTitle()
                {
                    Display = !string.IsNullOrEmpty(SubTitle),
                    Text = new IndexableOption<string>(SubTitle),
                },
                Animation = new Animation()
                {
                    Duration = 1000,
                    Easing = Easing.EaseInOutExpo
                },
                ResponsiveAnimationDuration = 1000
            }
        };

        navDataset = new LineDataset<TimeTuple<decimal>>
        {
            Fill = false,
            BorderWidth = 2,
            PointRadius = 1,
            PointHoverRadius = 3,
            PointBorderWidth = 1,
            PointHoverBorderWidth = 1,
            SteppedLine = SteppedLine.False,
            LineTension = 0
        };

        marketDataset = new LineDataset<TimeTuple<decimal>>
        {
            Fill = false,
            BorderWidth = 2,
            PointRadius = 1,
            PointHoverRadius = 3,
            PointBorderWidth = 1,
            PointHoverBorderWidth = 1,
            SteppedLine = SteppedLine.False,
            LineTension = 0,
            BackgroundColor = ColorUtil.FromDrawingColor(InvictusColours.ICAP),
            BorderColor = ColorUtil.FromDrawingColor(InvictusColours.ICAP)
        };
    }

    [Parameter]
    public int Height { get; set; } = 300;

    [Parameter]
    public int Width { get; set; } = 2000;

    [Parameter]
    public string SubTitle { get; set; } = string.Empty;

    [Parameter]
    public ApiFund Fund { get; set; }

    protected DateTimeOffset? StartDate { get; private set; }

    protected DateTimeOffset? EndDate { get; private set; }

    protected PriceMode Mode { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        AppState.Assign(async () => await DrawAsync(false));

        navDataset.Label = $"Nav ({UserSettings.CurrencyCode.GetSymbol()})";
        navDataset.BackgroundColor = ColorUtil.FromDrawingColor(InvictusColours.GetByFund(Fund.Token.Symbol));
        navDataset.BorderColor = ColorUtil.FromDrawingColor(InvictusColours.GetByFund(Fund.Token.Symbol));

        config.Data.Datasets.Add(navDataset);

        if (Fund.Market.IsTradeable)
        {
            marketDataset.Label = $"Price ({UserSettings.CurrencyCode.GetSymbol()})";

            config.Data.Datasets.Add(marketDataset);
        }

        await DrawAsync(true);
    }

    private async Task DrawAsync(bool firstRender)
    {
        if (!firstRender)
        {
            navDataset.RemoveAll(x => true);
            marketDataset.RemoveAll(x => true);
        }

        await foreach (var perf in ApiClient.ListFundPerformanceAsync(Fund.Token.Symbol, Mode, StartDate.Value.UtcDateTime, EndDate.Value.UtcDateTime))
        {
            navDataset.Add(new TimeTuple<decimal>(new Moment(perf.Date), perf.NetAssetValuePerToken));

            if (perf.MarketValuePerToken.HasValue)
            {
                marketDataset.Add(new TimeTuple<decimal>(new Moment(perf.Date), perf.MarketValuePerToken.Value));
            }
        }

        await chart.Update();

        StateHasChanged();
    }

    public async Task OnRangeSelectAsync(DateRange range)
    {
        StartDate = range.Start;
        EndDate = range.End;

        await DrawAsync(false);
    }

    protected async Task OnClickAsync(PriceMode mode)
    {
        if (Mode != mode)
        {
            Mode = mode;

            await DrawAsync(false);
        }
    }
}

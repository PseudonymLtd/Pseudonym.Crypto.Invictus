@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.LineChart
@inject IUserSettings UserSettings
@inject IAppState AppState
@inject NavigationManager NavigationManager

<div>
    <div style="margin-bottom: 1rem;">
        <DateRangePicker MinDate="MinDate"
                         MaxDate="MaxDate"
                         StartDate="StartDate"
                         EndDate="EndDate"
                         Culture="CultureInfo.CurrentUICulture"
                         CancelButtonClasses="neutral"
                         ApplyButtonClasses="invictus"
                         OnRangeSelect="OnRangeSelectAsync"
                         class="form-control form-control-sm date-picker" />
    </div>
    <div style="max-width: 100%; max-height: @($"{Height}px");">
        <div style="position: relative;">
            @if (rendering)
            {
                <div style="position: absolute; width: 100%; height: 100%; text-align: center; padding: 100px 0;">
                    <Awaiting Symbol="Stake.Token.Symbol" />
                </div>
            }
            <ChartJsLineChart Config="config" Width="Width" Height="Height" @ref="chart" />
        </div>
    </div>
</div>

@code {

    private const string ActualPrefix = "Actual-";
    private const string ProjectedPrefix = "Proj-";

    private static readonly DateTime MinDate = StakingHelper.StartDate;
    private static readonly DateTime MaxDate = DateTime.UtcNow.AddYears(1);

    private readonly LineConfig config;
    private readonly List<LineDataset<TimeTuple<decimal>>> datasets;
    private ChartJsLineChart chart;
    private bool rendering;

    public StakeTokenAccrualChart()
    {
        rendering = true;
        StartDate = MinDate;
        EndDate = MaxDate;

        config = new LineConfig()
        {
            Options = new LineOptions()
            {
                ShowLines = true,
                SpanGaps = true,
                Hover = new LineOptionsHover()
                {
                    DisplayColors = true,
                    Enabled = true,
                    Intersect = true,
                    Mode = InteractionMode.Nearest,
                },
                Scales = new Scales()
                {
                    yAxes = new List<CartesianAxis>()
                    {
                        new LinearCartesianAxis()
                        {
                            ID = "Count",
                            Ticks = new LinearCartesianTicks()
                            {
                                BeginAtZero = true,
                                FontColor = ColorUtil.FromDrawingColor(Color.White),
                                Precision = 0
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                LabelString = "Count",
                                FontColor = ColorUtil.FromDrawingColor(Color.White),
                                Display = true,
                            }
                        }
                    },
                    xAxes = new List<CartesianAxis>()
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Auto,
                                FontColor = ColorUtil.FromDrawingColor(Color.White)
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Second,
                                MinUnit = TimeMeasurement.Second,
                                TooltipFormat = "YYYY-MM-DD",
                                DisplayFormats = TimeDisplayFormats.DE_CH,
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                LabelString = "Time",
                                FontColor = ColorUtil.FromDrawingColor(Color.White),
                                Display = true,
                            }
                        }
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips()
                {
                    DisplayColors = true,
                    Intersect = false,
                    Mode = InteractionMode.Nearest,
                },
                Legend = new Legend()
                {
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = ColorUtil.FromDrawingColor(Color.White)
                    }
                },
                MaintainAspectRatio = false,
                Title = new OptionsTitle()
                {
                    Display = !string.IsNullOrEmpty(SubTitle),
                    Text = new IndexableOption<string>(SubTitle),
                    FontColor = ColorUtil.FromDrawingColor(Color.White)
                },
                Animation = new Animation()
                {
                    Duration = 1000,
                    Easing = Easing.EaseInOutExpo
                },
                ResponsiveAnimationDuration = 1000
            }
        };

        datasets = new List<LineDataset<TimeTuple<decimal>>>();
    }

    [Parameter]
    public int Height { get; set; } = 300;

    [Parameter]
    public int Width { get; set; } = 2000;

    [Parameter]
    public string SubTitle { get; set; } = string.Empty;

    [Parameter]
    public ApiStake Stake { get; set; }

    [Parameter]
    public ApiFund Fund { get; set; }

    [Parameter]
    public IReadOnlyList<ApiStakeEvent> StakeEvents { get; set; } = new List<ApiStakeEvent>();

    protected DateTimeOffset? StartDate { get; private set; }

    protected DateTimeOffset? EndDate { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        AppState.Assign(async () => await DrawAsync(false));

        var countAxis = config.Options.Scales.yAxes.OfType<LinearCartesianAxis>().Single(x => x.ID == "Count");
        countAxis.ScaleLabel.LabelString = $"{Stake.Token.Symbol} Count";

        datasets.Add(new LineDataset<TimeTuple<decimal>>()
        {
            Id = $"{ActualPrefix}{Stake.Token.Address}",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 1,
            PointHoverRadius = 3,
            PointBorderWidth = 1,
            PointHoverBorderWidth = 1,
            SteppedLine = SteppedLine.False,
            LineTension = 0,
            Label = $"Actual ({Stake.Token.Symbol})",
            BackgroundColor = ColorUtil.FromDrawingColor(InvictusColours.GetByFund(Stake.Token.Symbol)),
            BorderColor = ColorUtil.FromDrawingColor(InvictusColours.GetByFund(Stake.Token.Symbol)),
            PointHitRadius = 4
        });

        datasets.Add(new LineDataset<TimeTuple<decimal>>()
        {
            Id = $"{ProjectedPrefix}{Stake.Token.Address}",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 1,
            PointHoverRadius = 3,
            PointBorderWidth = 1,
            PointHoverBorderWidth = 1,
            SteppedLine = SteppedLine.False,
            LineTension = 0,
            Label = $"Projected ({Stake.Token.Symbol})",
            BackgroundColor = ColorUtil.ColorString(255, 255, 255),
            BorderColor = ColorUtil.ColorString(255, 255, 255),
            PointHitRadius = 4
        });

        StartDate = StakeEvents.OrderBy(x => x.ConfirmedAt).First().ConfirmedAt.Date;
        EndDate = StartDate.Value.AddMonths(3);

        if (StartDate < StakingHelper.StartDate)
        {
            StartDate = StakingHelper.StartDate;
        }

        foreach (var dataset in datasets)
        {
            config.Data.Datasets.Add(dataset);
        }

        await DrawAsync(true);
    }

    public async Task DrawAsync(bool firstRender)
    {
        rendering = true;

        if (!firstRender)
        {
            datasets.ForEach(d => d.RemoveAll(x => true));

            StateHasChanged();
        }

        var axis = config.Options.Scales.xAxes.OfType<TimeAxis>().First();

        axis.Time.Min = new Moment(StartDate.Value.UtcDateTime);
        axis.Time.Max = new Moment(EndDate.Value.UtcDateTime);

        var hasMovedToProjected = false;

        foreach (var days in Enumerable.Range(0, (int)(EndDate.Value - StartDate.Value).TotalDays))
        {
            var dataPoint = StartDate.Value.AddDays(days);
            var dataSet = datasets.Single(x =>
                dataPoint <= DateTime.UtcNow
                    ? x.Id.StartsWith(ActualPrefix)
                    : x.Id.StartsWith(ProjectedPrefix));

            if (!hasMovedToProjected)
            {
                hasMovedToProjected = dataSet.Id.StartsWith(ProjectedPrefix);
                if (hasMovedToProjected)
                {
                    var actualSet = datasets.Single(x => x.Id.StartsWith(ActualPrefix));

                    var lastActual = actualSet.Data.Last();

                    dataSet.Add(new TimeTuple<decimal>(lastActual.Time, lastActual.YValue));
                }
            }

            var earnings = StakingHelper.CalculateEarnings(Stake, Fund, StakeEvents, dataPoint.UtcDateTime);

            dataSet.Add(new TimeTuple<decimal>(new Moment(dataPoint.UtcDateTime), earnings));
        }

        if (chart != null)
        {
            await chart.Update();
        }

        rendering = false;

        StateHasChanged();
    }

    public async Task OnRangeSelectAsync(DateRange range)
    {
        StartDate = range.Start;
        EndDate = range.End;

        await DrawAsync(false);
    }
}

@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.LineChart
@inject IUserSettings UserSettings
@inject IApiClient ApiClient
@inject IAppState AppState
@inject NavigationManager NavigationManager

<div>
    <div>
        <DateRangePicker MinDate="DateTimeOffset.UtcNow.AddYears(-1)"
                         MaxDate="DateTimeOffset.UtcNow.AddDays(1).Date"
                         StartDate="StartDate"
                         EndDate="EndDate"
                         Culture="CultureInfo.CurrentUICulture"
                         CancelButtonClasses="neutral"
                         ApplyButtonClasses="invictus"
                         OnRangeSelect="OnRangeSelectAsync"
                         class="form-control form-control-sm date-picker" />
        <ul class="pagination pagination-sm price-mode" style="margin-right: -10px;">
            @foreach (PriceMode val in Enum.GetValues(typeof(PriceMode)).Cast<PriceMode>().Where(pm => pm != PriceMode.Raw))
            {
                <li class="page-item @(Mode == val ? "active" : string.Empty)" style="cursor: pointer">
                    <span style="background-color: #2d3238; color: white; border-color: @ColorUtil.FromDrawingColor(InvictusColours.GetByFund(Stake.Token.Symbol));"
                          class="page-link @(Mode == val ? Stake.Token.Symbol.ToString().ToLower() : string.Empty)"
                          @onclick="async (e) => await OnClickAsync(val)">
                        @val.ToString()
                        <span class="sr-only">(@val.ToString())</span>
                    </span>
                </li>
            }
        </ul>
    </div>
    <div style="max-width: 100%; max-height: @($"{Height}px"); margin-bottom: 40px;">
        <div style="position: relative;">
            @if (rendering)
            {
                <div style="position: absolute; width: 100%; height: 100%; text-align: center; padding: 100px 0;">
                    <Awaiting Symbol="Stake.Token.Symbol" />
                </div>
            }
            <ChartJsLineChart Config="config" Width="Width" Height="Height" @ref="chart" />
        </div>
    </div>
</div>

@code {

    private readonly LineConfig config;
    private readonly List<LineDataset<TimeTuple<decimal>>> datasets;
    private ChartJsLineChart chart;
    private bool rendering;

    public StakePowerChart()
    {
        rendering = true;

        Mode = PriceMode.Avg;
        EndDate = DateTimeOffset.UtcNow.AddDays(1).Date;
        StartDate = EndDate.Value.AddYears(-1);

        config = new LineConfig()
        {
            Options = new LineOptions()
            {
                ShowLines = true,
                SpanGaps = true,
                Hover = new LineOptionsHover()
                {
                    DisplayColors = true,
                    Enabled = true,
                    Intersect = true,
                    Mode = InteractionMode.Y
                },
                Scales = new Scales()
                {
                    yAxes = new List<CartesianAxis>()
                    {
                        new LinearCartesianAxis()
                        {
                            ID = "Power",
                            Ticks = new LinearCartesianTicks()
                            {
                                BeginAtZero = true,
                                FontColor = ColorUtil.FromDrawingColor(Color.White),
                                Precision = 2
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                LabelString = "Power",
                                FontColor = ColorUtil.FromDrawingColor(Color.White),
                                Display = true,
                            }
                        }
                    },
                    xAxes = new List<CartesianAxis>()
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data,
                                FontColor = ColorUtil.FromDrawingColor(Color.White)
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Hour,
                                TooltipFormat = "DD-MM-YYYY",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                FontColor = ColorUtil.FromDrawingColor(Color.White)
                            }
                        }
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips()
                {
                    DisplayColors = true,
                    Intersect = false,
                    Mode = InteractionMode.Nearest,
                },
                Legend = new Legend()
                {
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = ColorUtil.FromDrawingColor(Color.White)
                    }
                },
                MaintainAspectRatio = false,
                Title = new OptionsTitle()
                {
                    Display = !string.IsNullOrEmpty(SubTitle),
                    Text = new IndexableOption<string>(SubTitle),
                    FontColor = ColorUtil.FromDrawingColor(Color.White)
                },
                Animation = new Animation()
                {
                    Duration = 1000,
                    Easing = Easing.EaseInOutExpo
                },
                ResponsiveAnimationDuration = 1000
            }
        };

        datasets = new List<LineDataset<TimeTuple<decimal>>>();
    }

    [Parameter]
    public int Height { get; set; } = 300;

    [Parameter]
    public int Width { get; set; } = 2000;

    [Parameter]
    public string SubTitle { get; set; } = string.Empty;

    [Parameter]
    public ApiStake Stake { get; set; }

    protected DateTimeOffset? StartDate { get; private set; }

    protected DateTimeOffset? EndDate { get; private set; }

    protected PriceMode Mode { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        AppState.Assign(async () => await DrawAsync(false));

        var powerAxis = config.Options.Scales.yAxes.OfType<LinearCartesianAxis>().Single(x => x.ID == "Power");
        powerAxis.ScaleLabel.LabelString = $"Power {UserSettings.CurrencyCode.GetSymbol()}";

        datasets.AddRange(Stake.FundMultipliers.Select(f => new LineDataset<TimeTuple<decimal>>()
        {
            Id = f.Key.ToString(),
            Fill = false,
            BorderWidth = 2,
            PointRadius = 4,
            PointHoverRadius = 6,
            PointBorderWidth = 1,
            PointHoverBorderWidth = 1,
            SteppedLine = SteppedLine.False,
            LineTension = 0,
            Label = $"{f.Key}",
            BackgroundColor = ColorUtil.FromDrawingColor(InvictusColours.GetByFund(f.Key)),
            BorderColor = ColorUtil.FromDrawingColor(InvictusColours.GetByFund(f.Key)),
            PointHitRadius = 8
        }));

        foreach (var dataset in datasets)
        {
            config.Data.Datasets.Add(dataset);
        }

        await DrawAsync(true);
    }

    private async Task DrawAsync(bool firstRender)
    {
        rendering = true;

        if (!firstRender)
        {
            datasets.ForEach(d => d.RemoveAll(x => true));

            StateHasChanged();
        }

        await foreach (var power in ApiClient
            .ListStakePowerPerformanceAsync(Stake.Token.Symbol, Mode, StartDate.Value.UtcDateTime, EndDate.Value.UtcDateTime))
        {
            foreach (var dataset in datasets)
            {
                var symbol = Enum.Parse<Symbol>(dataset.Id);

                var powerBreakdown = power.Breakdown.SingleOrDefault(x => x.Symbol == symbol);
                if (powerBreakdown != null)
                {
                    dataset.Add(new TimeTuple<decimal>(new Moment(power.Date), powerBreakdown.Power));
                }
                else
                {
                    dataset.Add(new TimeTuple<decimal>(new Moment(power.Date), 0));
                }
            }
        }

        var earliestDate = datasets
            .Select(x => x.Data.Select(y => (DateTime)y.Time).OrderBy(y => y).First())
            .OrderBy(x => x)
            .First();

        var latestDate = datasets
            .Select(x => x.Data.Select(y => (DateTime)y.Time).OrderByDescending(y => y).First())
            .OrderByDescending(x => x)
            .First();

        var axis = config.Options.Scales.xAxes.OfType<TimeAxis>().First();

        axis.Time.Min = new Moment(earliestDate);
        axis.Time.Max = new Moment(latestDate);

        if (chart != null)
        {
            await chart.Update();
        }

        rendering = false;

        StateHasChanged();
    }

    public async Task OnRangeSelectAsync(DateRange range)
    {
        StartDate = range.Start;
        EndDate = range.End;

        await DrawAsync(false);
    }

    protected async Task OnClickAsync(PriceMode mode)
    {
        if (Mode != mode)
        {
            Mode = mode;

            await DrawAsync(false);
        }
    }
}

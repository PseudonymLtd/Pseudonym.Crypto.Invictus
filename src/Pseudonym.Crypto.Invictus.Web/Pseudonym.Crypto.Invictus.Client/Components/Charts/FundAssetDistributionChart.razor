@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@inject IUserSettings UserSettings
@inject IAppState AppState
@inject NavigationManager NavigationManager
@inject IJSRuntime Runtime

@if (!config.Data.Datasets.Any())
{
    <Loading />
}
else
{
    <div style="
        max-width: @($"{Width}px");
        max-height: @($"{Height}px");
        margin-bottom: 40px;
        margin-left: auto;
        margin-right: auto;">
        <ChartJsPieChart Config="config" Width="Width" Height="Height" @ref="chart" />
    </div>
}

@code {

    private readonly PieConfig config;
    private ChartJsPieChart chart;

    public FundAssetDistributionChart()
    {
        config = new PieConfig();
    }

    [Parameter]
    public int Height { get; set; } = 800;

    [Parameter]
    public int Width { get; set; } = 600;

    [Parameter]
    public string SubTitle { get; set; } = string.Empty;

    [Parameter]
    public bool IsHollow { get; set; }

    [Parameter]
    public ApiFund Fund { get; set; }

    [Parameter]
    public EventCallback<ApiHolding> HoldingClickCallback { get; set; }

    [JSInvokable]
    public void InstanceClickHandler(object sender, object args)
    {
        var clickData = JsonConvert.DeserializeObject<List<JPieClickData>>(args.ToString())
            .FirstOrDefault();

        if (clickData != null)
        {
            var fund = UserSettings.Funds.SingleOrDefault(f =>
                f.Value.DisplayName.Equals(clickData.Model.Label, StringComparison.OrdinalIgnoreCase));

            if (!fund.Equals(default(KeyValuePair<Symbol, FundInfo>)))
            {
                NavigationManager.NavigateTo($"/funds/{fund.Key}", true);
            }
            else
            {
                var asset = Fund.Assets.SingleOrDefault(a => a.Holding.Name.Equals(clickData.Model.Label, StringComparison.OrdinalIgnoreCase));
                if (asset != null)
                {
                    Runtime.InvokeAsync<object>("open", asset.Holding.Links.Link.OriginalString, "_blank")
                        .GetAwaiter()
                        .GetResult();
                }
            }
        }
    }

    protected override void OnInitialized()
    {
        AppState.Assign(() => Draw(false));

        config.Options = new PieOptions(IsHollow)
        {
            Responsive = true,
            Tooltips = new Tooltips()
            {
                DisplayColors = true
            },
            MaintainAspectRatio = true,
            Title = new OptionsTitle()
            {
                Display = !string.IsNullOrEmpty(SubTitle),
                Text = new IndexableOption<string>(SubTitle),
                FontColor = ColorUtil.FromDrawingColor(Color.White)
            },
            Legend = new Legend()
            {
                Labels = new LegendLabelConfiguration()
                {
                    FontColor = ColorUtil.FromDrawingColor(Color.White),
                }
            },
            Animation = new ArcAnimation()
            {
                AnimateRotate = true,
                AnimateScale = true,
                Duration = 1000,
                Easing = Easing.EaseInOutCirc
            },
            ResponsiveAnimationDuration = 1000,
            OnClick = new DotNetInstanceClickHandler(InstanceClickHandler)
        };

        Draw(true);
    }

    private void Draw(bool firstRender)
    {
        if (!firstRender)
        {
            config.Data.Datasets.Clear();
            config.Data.Labels.Clear();

            StateHasChanged();
        }

        var colours = new List<Color>();
        var dataSet = new PieDataset()
        {
            BorderWidth = 2,
            HoverBorderWidth = 2,
            BorderAlign = BorderAlign.Inner,
            Weight = 1
        };

        foreach (var asset in Fund.Assets)
        {
            dataSet.Data.Add((double)Math.Round(asset.Total, 2));

            var symbol = Enum.IsDefined(typeof(Symbol), asset.Holding.Symbol)
                ? Enum.Parse<Symbol>(asset.Holding.Symbol)
                : default(Symbol?);

            if (symbol.HasValue && UserSettings.Funds.ContainsKey(symbol.Value))
            {
                colours.Add(InvictusColours.GetByFund(symbol.Value));

                config.Data.Labels.Add(UserSettings.Funds[symbol.Value].DisplayName);
            }
            else
            {
                colours.Add(string.IsNullOrEmpty(asset.Holding.HexColour)
                    ? InvictusColours.RandomColor()
                    : ColorTranslator.FromHtml(asset.Holding.HexColour));

                config.Data.Labels.Add(asset.Holding.Name);
            }
        }

        var compiledColours = colours
            .Select(c => ColorUtil.FromDrawingColor(c))
            .ToArray();

        dataSet.BackgroundColor = compiledColours;
        dataSet.BorderColor = compiledColours;

        var compiledHoverColours = colours
            .Select(c => ColorUtil.ColorString(c.R, c.G, c.B, 0.5))
            .ToArray();

        dataSet.HoverBackgroundColor = compiledHoverColours;
        dataSet.HoverBorderColor = compiledColours;

        config.Data.Datasets.Add(dataSet);

        StateHasChanged();
    }
}

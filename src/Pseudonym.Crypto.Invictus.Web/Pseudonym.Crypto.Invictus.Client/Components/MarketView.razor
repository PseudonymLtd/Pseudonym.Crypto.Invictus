@inject IAppState AppState
@inject IJSRuntime JsRuntime

<div class="jumbotron jumbotron-fluid">
    <div class="container" style="padding-top: 12px; padding-bottom: 12px; border: 1px solid transparent;">
        <div class="row">
            <div class="col">
                <h1 class="display-4">Markets</h1>
                <div id="carouselMarkets" class="carousel slide" data-ride="carousel">
                    <ol class="carousel-indicators">
                        @for (int i = 0; i < ExchangePairs.Count; i++)
                        {
                            <li data-target="#carouselMarkets" data-slide-to="@i" class="@(i == 0 ? "active" : string.Empty)"></li>
                        }
                    </ol>
                    <div class="carousel-inner">
                        @for (int i = 0; i < ExchangePairs.Count; i++)
                        {
                            <div class="carousel-item @(i == 0 ? "active" : string.Empty)">
                                <div class="tradingview-widget-container">
                                    <div id="@GetMarketId(ExchangePairs[i].Exchange, ExchangePairs[i].Pair)" style="min-height: 600px; height: 600px;">
                                    </div>
                                </div>
                                <div class="carousel-caption d-none d-md-block">
                                    <h5>@ExchangePairs[i].Exchange Market Pair @ExchangePairs[i].Pair</h5>
                                </div>
                            </div>
                        }
                    </div>
                    <a class="carousel-control-prev" href="#carouselMarkets" role="button" data-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="sr-only">Previous</span>
                    </a>
                    <a class="carousel-control-next" href="#carouselMarkets" role="button" data-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="sr-only">Next</span>
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    public MarketView()
    {
        InstanceId = $"MV-{Guid.NewGuid()}";
    }

    [Parameter]
    public List<(string Exchange, string Pair)> ExchangePairs { get; set; } = new List<(string, string)>();

    protected string InstanceId { get; }

    protected override void OnInitialized()
    {
        AppState.Assign(StateHasChanged);
    }

    protected string GetMarketId(string Exchange, string Pair)
    {
        return $"{InstanceId}-{Exchange}-{Pair}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        foreach (var item in ExchangePairs)
        {
            var marketId = GetMarketId(item.Exchange, item.Pair);

            await JsRuntime.InvokeAsync<string>("functions.NewMarket", marketId, item.Exchange, item.Pair);
        }
    }
}

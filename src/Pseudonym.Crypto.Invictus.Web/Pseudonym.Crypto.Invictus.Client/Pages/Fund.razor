@page "/funds/{symbol}"
@inject IUserSettings UserSettings
@inject IApiClient Client
@inject IAppState AppState
@inject NavigationManager NavigationManager

@if (fund == null)
{
    <Loading />
}
else
{
    <FundSummary Fund="fund" Clickable="false" />
    <FundPerformanceChart Fund="fund" />
    <h2 class="display-4" style="text-align: center;">Fund Assets</h2>
    <FundAssetDistributionChart Fund="fund" IsHollow="true" />
    <div class="container-fluid">
        @foreach (var asset in fund.Assets)
        {
            var symbol = Enum.IsDefined(typeof(Symbol), asset.Symbol)
                ? Enum.Parse<Symbol>(asset.Symbol)
                : default(Symbol?);

        <div class="row justify-content-center row-cols-1 row-cols-sm-2 row-cols-md-5" style="border: 1px solid transparent;">
            <div class="col py-1">
                <small style="font-weight: bold;">Asset Name</small>
                <div>
                    @if (symbol.HasValue && UserSettings.Funds.ContainsKey(symbol.Value))
                    {
                        <FundLink DisplayName="@UserSettings.Funds[symbol.Value].DisplayName" Name="@UserSettings.Funds[symbol.Value].Name" />
                    }
                    else
                    {
                        @asset.Name
                    }
                </div>
            </div>
            <div class="col py-1">
                <small style="font-weight: bold;">Token</small>
                <div>
                    @if (symbol.HasValue && UserSettings.Funds.ContainsKey(symbol.Value))
                    {
                        <Token Symbol="@asset.Symbol" ContractAddress="@UserSettings.Funds[symbol.Value].ContractAddress" />
                    }
                    else
                    {
                        @asset.Symbol
                    }
                </div>
            </div>
            <div class="col py-1">
                <small style="font-weight: bold;">Value (@UserSettings.CurrencyCode.GetSymbol())</small>
                <div>
                    <Money Value="@asset.Value" CurrencyCode="UserSettings.CurrencyCode" />
                </div>
            </div>
            <div class="col py-1">
                <small style="font-weight: bold;">Share</small>
                <div>
                    <LargeNumber Value="asset.Share" Decimals="2" Suffix="%" />
                </div>
            </div>
            <div class="col py-1">
                <small style="font-weight: bold;">Explore</small>
                <div>
                    @if (symbol.HasValue)
                    {
                        <a @onclick="async (e) => { Symbol = asset.Symbol; await DrawAsync(false); }" href="funds/@symbol.Value" class="btn btn-primary btn-sm @symbol.Value.ToString().ToLower()" role="button">View Details</a>
                    }
                    else
                    {
                        <a href="@asset.Link.OriginalString" target="_blank" class="btn btn-danger btn-sm" role="button">External</a>
                    }
                </div>
            </div>
        </div>
        }
    </div>
}

@code {

    private ApiFund fund;

    [Parameter]
    public string Symbol { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AppState.Assign(async () => await DrawAsync(false));

        await DrawAsync(true);
    }

    private async Task DrawAsync(bool firstRender)
    {
        if (Enum.TryParse(Symbol, out Symbol symbol))
        {
            if (!firstRender)
            {
                fund = null;

                StateHasChanged();
            }

            fund = await Client.GetFundAsync(symbol);

            StateHasChanged();
        }
        else
        {
            throw new ArgumentException($"Could not pass parameter '{Symbol}'", nameof(Symbol));
        }
    }
}

@page "/funds/{symbol}"
@inject IUserSettings UserSettings
@inject IApiClient Client
@inject IAppState AppState

@if (fund == null)
{
    <Loading />
}
else
{
    <FundSummary Fund="fund" Clickable="false" ShowGraph="true" />
    <FundBreakdown Fund="fund" />
    @if (fund.Market.IsTradeable)
    {
        switch (fund.Token.Symbol)
        {
            case Invictus.Shared.Enums.Symbol.IHF:
                <MarketView Exchange="HITBTC" Pair="IHFUSDT" />
                break;
            case Invictus.Shared.Enums.Symbol.C20:
                <MarketView Exchange="HITBTC" Pair="C20USD" />
                break;
        }
    }
}

@code {

    private ApiFund fund;

    [Parameter]
    public string Symbol { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AppState.Assign(async () => await DrawAsync(false));

        await DrawAsync(true);
    }

    private async Task DrawAsync(bool firstRender)
    {
        if (Enum.TryParse(Symbol, out Symbol symbol))
        {
            if (!firstRender)
            {
                fund = null;

                StateHasChanged();
            }

            fund = await Client.GetFundAsync(symbol);

            StateHasChanged();
        }
        else
        {
            throw new ArgumentException($"Could not pass parameter '{Symbol}'", nameof(Symbol));
        }
    }
}

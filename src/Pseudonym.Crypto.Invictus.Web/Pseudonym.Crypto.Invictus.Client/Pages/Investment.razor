@page "/investments/{symbol}"
@inject IJSRuntime JSRuntime
@inject IUserSettings UserSettings
@inject IApiClient Client
@inject IAppState AppState
@inject NavigationManager NavigationManager

@if (!UserSettings.HasValidAddress())
{
    <WalletEntry />
}
else if (investment == null)
{
    <Loading />
}
else
{
    <InvestmentSummary Investment="investment" Transactions="transactions" ShowGraph="true" Clickable="false" ClickCallback="TransactionOnClickAsync" @ref="investmentSummary" />
    <FundBreakdown Fund="investment.Fund" />
    if (investment.SubInvestments.Any())
    {
        <InvestmentExposure Investments="investment.SubInvestments" />
    }
    if (investment.Fund.Market.IsTradeable)
    {
        switch (investment.Fund.Token.Symbol)
        {
            case Invictus.Shared.Enums.Symbol.IHF:
                <MarketView Exchange="HITBTC" Pair="IHFUSDT" />
                break;
            case Invictus.Shared.Enums.Symbol.C20:
                <MarketView Exchange="HITBTC" Pair="C20USD" />
                break;
        }
    }
    if (!transactions.Any())
    {
        <Loading />
    }
    else
    {
        <div>
            @foreach (var transaction in transactions.OrderByDescending(x => x.ConfirmedAt))
            {
                <Anchor Id="@transaction.Hash" />
                <TransactionSummary Fund="investment.Fund" Transaction="transaction" CollapseId="@($"Id-{transaction.Hash}")" />
            }
        </div>
    }
}

@code {

    private readonly List<BusinessTransaction> transactions;

    private ApiInvestment investment;
    private InvestmentSummary investmentSummary;

    public Investment()
    {
        transactions = new List<BusinessTransaction>();
    }

    [Parameter]
    public string Symbol { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AppState.Assign(async () => await DrawAsync(false));

        await DrawAsync(true);
    }

    protected async Task TransactionOnClickAsync(BusinessTransaction clickedTransaction)
    {
        await JSRuntime.InvokeVoidAsync($"functions.CollapseShow", $"Id-{clickedTransaction.Hash}");

        NavigationManager.NavigateTo($"investments/{investment.Fund.Token.Symbol}#{clickedTransaction.Hash.ToAnchorName()}");
    }

    private async Task DrawAsync(bool firstRender)
    {
        if (Enum.TryParse(Symbol, out Symbol symbol))
        {
            if (!firstRender)
            {
                investment = null;
                transactions.Clear();

                StateHasChanged();
            }

            if (UserSettings.HasValidAddress())
            {
                var now = DateTimeOffset.UtcNow.Date;
                investment = await Client.GetInvestmentAsync(symbol);

                StateHasChanged();

                await foreach (var transaction in Client.ListInvestmentTransactionsAsync(symbol))
                {
                    transactions.Add(Map(
                        transaction,
                        transaction.ConfirmedAt.Date == now
                        ? new ApiPerformance()
                        {
                            NetAssetValuePerToken = investment.Fund.NetAssetValuePerToken,
                            MarketValuePerToken = investment.Fund.Market.PricePerToken
                        }
                        : null));
                }

                StateHasChanged();

                var maxDate = transactions.Max(x => x.ConfirmedAt).AddDays(1);
                var max = now.AddDays(-1);

                await foreach (var perf in Client
                    .ListFundPerformanceAsync(
                        symbol,
                        PriceMode.Avg,
                        transactions.Min(x => x.ConfirmedAt).AddDays(-1),
                        maxDate > max
                            ? max
                            : maxDate))
                {
                    var items = transactions
                        .Where(t => t.ConfirmedAt.Date == perf.Date.Date)
                        .ToList();

                    if (items.Any())
                    {
                        foreach (var item in items)
                        {
                            item.Price = new BusinessPrice()
                            {
                                NetAssetValuePerToken = perf.NetAssetValuePerToken,
                                MarketValuePerToken = perf.MarketValuePerToken
                            };

                            foreach (var operation in item.Operations.Where(op =>
                                op.PricePerToken == default &&
                                op.Contract.Symbol.Equals(investment.Fund.Token.Symbol.ToString(), StringComparison.OrdinalIgnoreCase)))
                            {
                                operation.PricePerToken = perf.MarketValuePerToken ?? perf.NetAssetValuePerToken;
                            }
                        }

                        StateHasChanged();
                    }
                }

                await investmentSummary.StateHasChangedAsync();
            }
        }
        else
        {
            throw new ArgumentException($"Could not pass parameter '{Symbol}'", nameof(Symbol));
        }
    }

    private BusinessTransaction Map(ApiTransactionSet transaction, ApiPerformance performance)
    {
        return new BusinessTransaction()
        {
            Hash = transaction.Hash,
            ContractAddress = investment.Fund.Token.Address,
            BlockNumber = transaction.BlockNumber,
            Confirmations = transaction.Confirmations,
            ConfirmedAt = transaction.ConfirmedAt,
            Success = transaction.Success,
            TransferAction = transaction.TransferAction,
            Eth = transaction.Eth,
            Gas = transaction.Gas,
            GasLimit = transaction.GasLimit,
            GasUsed = transaction.GasUsed,
            Sender = transaction.Sender,
            Recipient = transaction.Recipient,
            Price = performance != null
                ? new BusinessPrice()
                {
                    MarketValuePerToken = performance.MarketValuePerToken,
                    NetAssetValuePerToken = performance.NetAssetValuePerToken
                }
                : null,
            Operations = transaction.Operations
                .Select(operation => new BusinessOperation()
                {
                    IsEth = operation.IsEth,
                    Sender = operation.Sender,
                    Address = operation.Address,
                    PricePerToken =
                        performance != null &&
                        operation.PricePerToken == default &&
                        operation.Contract.Symbol.Equals(investment.Fund.Token.Symbol.ToString(), StringComparison.OrdinalIgnoreCase)
                            ? performance.MarketValuePerToken ?? performance.NetAssetValuePerToken
                            : operation.PricePerToken,
                    Priority = operation.Priority,
                    Quantity = operation.Quantity,
                    Type = operation.Type,
                    Value = operation.Value,
                    Recipient = operation.Recipient,
                    TransferAction = operation.TransferAction,
                    Contract = new BusinessContract()
                    {
                        Symbol = operation.Contract.Symbol,
                        Address = operation.Contract.Address,
                        Decimals = operation.Contract.Decimals,
                        Holders = operation.Contract.Holders,
                        Issuances = operation.Contract.Issuances,
                        Name = operation.Contract.Name,
                        Link = operation.Contract.Links.Link,
                        ImageLink = operation.Contract.Links.ImageLink,
                        MarketLink = operation.Contract.Links.MarketLink
                    }
                })
                .ToList()
        };
    }
}

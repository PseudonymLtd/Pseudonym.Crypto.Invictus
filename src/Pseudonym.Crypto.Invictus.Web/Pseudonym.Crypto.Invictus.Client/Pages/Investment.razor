@page "/investments/{symbol}"
@inject IUserSettings UserSettings
@inject IApiClient Client
@inject IAppState AppState
@inject NavigationManager NavigationManager
@if (!UserSettings.HasValidAddress())
{
    <WalletEntry />
}
else if (investment == null)
{
    <Loading />
}
else
{
    <InvestmentSummary Investment="investment" CurrencyCode="UserSettings.CurrencyCode" Clickable="false" />
    <h2 class="display-4">Transactions</h2>
    if (!transactions.Any())
    {
        <Loading />
    }
    else
    {
        <div class="container-fluid" style="max-width: none">
            @foreach (var transaction in transactions)
            {
                @*<div style="padding-top: 12px; padding-bottom: 12px; border: 1px solid transparent;" class="row">
                    <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto" style="min-width: 23%; padding-bottom: 15px;">
                        <small style="font-weight: bold;">Sender</small>
                        <div>
                            <EthAddress Address="@transaction.Sender" FontSize="16" />
                        </div>
                    </div>
                    <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto" style="min-width: 23%; padding-bottom: 15px;">
                        <small style="font-weight: bold;">Recipient</small>
                        <div>
                            <EthAddress Address="@transaction.Recipient" FontSize="16" />
                        </div>
                    </div>
                    <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto" style="min-width: 200px; padding-bottom: 15px;">
                        <small style="font-weight: bold;">Amount</small>
                        <div>
                            <LargeNumber Value="transaction.Eth" Decimals="2" />
                        </div>
                    </div>
                    <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto" style="min-width: 200px; padding-bottom: 15px;">
                        <small style="font-weight: bold;">Value (@UserSettings.CurrencyCode.GetSymbol())</small>
                        <div>
                            <Money Value="@(transaction.Amount * investment.Fund.NetAssetValuePerToken)" CurrencyCode="UserSettings.CurrencyCode" />
                        </div>
                    </div>
                </div>*@
            }
        </div>
    }
}

@code {

    private readonly List<ApiTransaction> transactions;
    private ApiInvestment investment;

    public Investment()
    {
        transactions = new List<ApiTransaction>();
    }

    [Parameter]
    public string Symbol { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AppState.Assign(async () => await DrawAsync(false));

        await DrawAsync(true);
    }

    private async Task DrawAsync(bool firstRender)
    {
        if (Enum.TryParse(Symbol, out Symbol symbol))
        {
            if (!firstRender)
            {
                investment = null;
                transactions.Clear();

                StateHasChanged();
            }

            if (UserSettings.HasValidAddress())
            {
                investment = await Client.GetInvestmentAsync(symbol);

                StateHasChanged();

                await foreach (var item in Client.ListInvestmentTransactionsAsync(symbol))
                {
                    transactions.Add(item);

                    StateHasChanged();
                }
            }
        }
        else
        {
            throw new ArgumentException($"Could not pass parameter '{Symbol}'", nameof(Symbol));
        }
    }
}

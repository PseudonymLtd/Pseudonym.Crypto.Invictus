@page "/investments/{symbol}"
@inject IUserSettings UserSettings
@inject IApiClient Client
@inject IAppState AppState
@inject NavigationManager NavigationManager
@if (!UserSettings.HasValidAddress())
{
    <WalletEntry />
}
else if (investment == null)
{
    <Loading />
}
else
{
    <InvestmentSummary Investment="investment" CurrencyCode="UserSettings.CurrencyCode" Clickable="false" />
    if (!transactions.Any())
    {
        <Loading />
    }
    else
    {
        <div>
            @foreach (var transaction in transactions.OrderByDescending(x => x.ConfirmedAt))
            {
                <TransactionSummary Transaction="transaction" />
            }
        </div>
    }
}

@code {

    private readonly List<ApiTransactionSet> transactions;
    private ApiInvestment investment;

    public Investment()
    {
        transactions = new List<ApiTransactionSet>();
    }

    [Parameter]
    public string Symbol { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AppState.Assign(async () => await DrawAsync(false));

        await DrawAsync(true);
    }

    private async Task DrawAsync(bool firstRender)
    {
        if (Enum.TryParse(Symbol, out Symbol symbol))
        {
            if (!firstRender)
            {
                investment = null;
                transactions.Clear();

                StateHasChanged();
            }

            if (UserSettings.HasValidAddress())
            {
                investment = await Client.GetInvestmentAsync(symbol);

                StateHasChanged();

                await foreach (var item in Client.ListInvestmentTransactionsAsync(symbol))
                {
                    transactions.Add(item);

                    StateHasChanged();
                }
            }
        }
        else
        {
            throw new ArgumentException($"Could not pass parameter '{Symbol}'", nameof(Symbol));
        }
    }
}

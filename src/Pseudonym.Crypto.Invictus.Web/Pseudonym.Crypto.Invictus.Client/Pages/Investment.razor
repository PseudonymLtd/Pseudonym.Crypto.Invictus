@inherits BaseComponent
@page "/investments/{symbol}"
@inject IJSRuntime JSRuntime
@inject IUserSettings UserSettings
@inject IApiClient Client
@inject IAppState AppState
@inject NavigationManager NavigationManager

@if (!UserSettings.HasValidAddress())
{
    <WalletEntry Issue="Please enter a valid wallet address to continue to view investments." />
}
else if (investment == null)
{
    <Loading />
}
else
{
    <InvestmentSummary Investment="investment" Transactions="transactions" ShowGraph="true" Clickable="false" ClickCallback="TransactionOnClickAsync" @ref="investmentSummary" />
    foreach (var stake in stakes)
    {
        <StakeEventFundBreakdown Fund="investment.Fund" Stake="stake.Key" Events="stake.Value" />
    }
    if (investment.Fund.Assets.Any())
    {
        <FundBreakdown Fund="investment.Fund" />
    }
    if (investment.SubInvestments.Any())
    {
        <InvestmentExposure Investments="investment.SubInvestments" />
    }
    if (investment.Fund.Market.IsTradeable)
    {
        switch (investment.Fund.Token.Symbol)
        {
            case Invictus.Shared.Enums.Symbol.IHF:
                var ihfPairs = new List<(string Exchange, string Pair)>()
    {
                    ("HITBTC", "IHFUSDT")
                };

    <MarketView ExchangePairs="ihfPairs" />
    break;
case Invictus.Shared.Enums.Symbol.C20:
    var c20Pairs = new List<(string Exchange, string Pair)>()
{
                    ("HITBTC", "C20USD"),
                    ("HITBTC", "C20ETH"),
                    ("HITBTC", "C20BTC")
                };
<MarketView ExchangePairs="c20Pairs" />
break;
}
}
if (!transactions.Any())
{
<Loading />
}
else
{
<div>
    @foreach (var transaction in transactions.OrderByDescending(x => x.ConfirmedAt))
    {
        <Anchor Id="@transaction.Hash" />
        <TransactionSummary Product="investment.Fund" Transaction="transaction" CollapseId="@($"Id-{transaction.Hash}")" />
    }
</div>
}
}

@code {

    private readonly Dictionary<ApiStake, List<ApiStakeEvent>> stakes;
    private readonly List<BusinessTransaction> transactions;

    private ApiInvestment investment;
    private InvestmentSummary investmentSummary;

    public Investment()
    {
        stakes = new Dictionary<ApiStake, List<ApiStakeEvent>>();
        transactions = new List<BusinessTransaction>();
    }

    [Parameter]
    public string Symbol { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AppState.Assign(async () => await DrawAsync(false));

        await DrawAsync(true);
    }

    protected async Task TransactionOnClickAsync(BusinessTransaction clickedTransaction)
    {
        await JSRuntime.InvokeVoidAsync($"functions.CollapseShow", $"Id-{clickedTransaction.Hash}");

        NavigationManager.NavigateTo($"investments/{investment.Fund.Token.Symbol}#{clickedTransaction.Hash.ToAnchorName()}");
    }

    private async Task DrawAsync(bool firstRender)
    {
        if (Enum.TryParse(Symbol, out Symbol symbol))
        {
            if (!firstRender)
            {
                investment = null;
                stakes.Clear();
                transactions.Clear();

                StateHasChanged();
            }

            if (UserSettings.HasValidAddress())
            {
                var now = DateTimeOffset.UtcNow.Date;
                investment = await Client.GetInvestmentAsync(symbol);

                StateHasChanged();

                await foreach (var transaction in Client.ListInvestmentTransactionsAsync(symbol))
                {
                    transactions.Add(Map(
                        UserSettings,
                        investment.Fund,
                        transaction,
                        transaction.ConfirmedAt.Date == now
                        ? new ApiPerformance()
                        {
                            NetAssetValuePerToken = investment.Fund.Nav.ValuePerToken,
                            MarketValuePerToken = investment.Fund.Market.PricePerToken
                        }
                        : null));
                }

                StateHasChanged();

                if (symbol.IsFund())
                {
                    await foreach (var stake in Client.ListStakesAsync())
                    {
                        stakes.Add(stake, new List<ApiStakeEvent>());

                        await foreach (var stakeEvent in Client.ListStakeEventsAsync(stake.Token.Symbol, symbol))
                        {
                            stakes[stake].Add(stakeEvent);
                        }

                        StateHasChanged();
                    }
                }

                var maxDate = transactions.Max(x => x.ConfirmedAt).AddDays(1);
                var max = now.AddDays(-1);

                await foreach (var perf in Client
                    .ListFundPerformanceAsync(
                        symbol,
                        PriceMode.Avg,
                        transactions.Min(x => x.ConfirmedAt).AddDays(-1),
                        maxDate > max
                            ? max
                            : maxDate))
                {
                    var items = transactions
                        .Where(t => t.ConfirmedAt.Date == perf.Date.Date)
                        .ToList();

                    if (items.Any())
                    {
                        foreach (var item in items)
                        {
                            item.Price = new BusinessPrice()
                            {
                                NetAssetValuePerToken = perf.NetAssetValuePerToken,
                                MarketValuePerToken = perf.MarketValuePerToken
                            };

                            foreach (var operation in item.Operations.Where(op =>
                                op.PricePerToken == default &&
                                op.Contract.Symbol.Equals(investment.Fund.Token.Symbol.ToString(), StringComparison.OrdinalIgnoreCase)))
                            {
                                operation.PricePerToken = perf.MarketValuePerToken ?? perf.NetAssetValuePerToken;
                            }
                        }

                        StateHasChanged();
                    }
                }

                await investmentSummary.StateHasChangedAsync();
            }
        }
        else
        {
            throw new ArgumentException($"Could not pass parameter '{Symbol}'", nameof(Symbol));
        }
    }
}

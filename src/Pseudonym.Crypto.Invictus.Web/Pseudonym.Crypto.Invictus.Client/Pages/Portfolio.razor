@page "/portfolio"
@inject IUserSettings UserSettings
@inject IApiClient Client
@inject IAppState AppState

<h1 class="display-3">Portfolio Overview</h1>

@if (portfolio == null)
{
    <div class="text-center">
        <div class="spinner-border text-danger" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <h2 class="portfolio-address">
        <EthAddress Address="@portfolio.Address" FontSize="28" />
        <small class="text-muted text-align-mob-center">(@portfolio.Investments.Count) Funds</small>
    </h2>
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-info mr-2" aria-hidden="true"></span>
        <span class="text-wrap">
            Below shows the snapshot of your portfolio performance as of right now.
        </span>
    </div>
    <div class="container-fluid" style="max-width: none">
        <div class="row">
            <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto" style="min-width: 200px; padding-bottom: 15px;">
                <small style="font-weight: bold;">Total Net Value (@UserSettings.CurrencyCode.GetSymbol())</small>
                <div>
                    <Money Value="portfolio.TotalAssetValue" Decimals="2" CurrencyCode="portfolio.Currency" />
                </div>
            </div>
            <div class="col-xs-auto col-sm-auto col-md-auto col-lg-auto col-xl-auto" style="min-width: 200px; padding-bottom: 15px;">
                <small style="font-weight: bold;">Total Market Value (@UserSettings.CurrencyCode.GetSymbol())</small>
                <div>
                    <Money Value="portfolio.TotalMarketValue" Decimals="2" CurrencyCode="portfolio.Currency" />
                </div>
            </div>
        </div>
    </div>
    <div class="container" style="display: contents;">
        @foreach (var investment in portfolio.Investments.OrderBy(x => x.Fund.DisplayName))
        {
            <div class="row">
                <div class="col">
                    <InvestmentSummary Investment="investment" CurrencyCode="portfolio.Currency" Clickable="false" />
                </div>
            </div>
        }
    </div>
}


@code {
    private ApiPortfolio portfolio;

    protected override async Task OnInitializedAsync()
    {
        AppState.Assign(async () => await DrawAsync(false));

        await DrawAsync(true);
    }

    private async Task DrawAsync(bool firstRender)
    {
        if (!firstRender)
        {
            portfolio = null;

            StateHasChanged();
        }

        portfolio = await Client.GetPortfolioAsync();

        StateHasChanged();
    }
}
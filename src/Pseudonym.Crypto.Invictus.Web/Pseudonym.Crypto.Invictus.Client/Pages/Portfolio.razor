@inherits BaseComponent
@page "/portfolio"
@inject IUserSettings UserSettings
@inject IApiClient Client
@inject IAppState AppState

<div style="text-align: center;">
    <h1 class="display-3">Portfolio</h1>
    <p class="lead">
        Below shows the snapshot of your portfolio value, you have invested in @investments.Count funds.
    </p>
</div>
@if (!UserSettings.HasValidAddress())
{
    <WalletEntry Issue="Please enter a valid wallet address to view your portfolio." />
}
else if (noInvestments)
{
    <WalletEntry Issue="The following address does not contain any Invictus investments, please try a different wallet." />
}
else if (!investments.Any())
{
    <Loading />
}
else
{
    <PortfolioSummary Investments="investments" />
    foreach (var stake in stakes)
    {
        <StakeEventBreakdown Stake="stake.Key" Funds="investments.Select(x => x.Fund).ToList()" Events="stake.Value" />
    }
    <div class="container" style="display: contents;">
        @foreach (var investment in investments.OrderByDescending(x => x.RealValue))
        {
            <div class="row">
                <div class="col">
                    <InvestmentSummary Investment="investment" Clickable="true" />
                </div>
            </div>
        }
    </div>
}


@code {

    private readonly Dictionary<ApiStake, List<ApiStakeEvent>> stakes;
    private readonly List<ApiInvestment> investments;
    private bool noInvestments = false;

    public Portfolio()
    {
        stakes = new Dictionary<ApiStake, List<ApiStakeEvent>>();
        investments = new List<ApiInvestment>();
    }

    protected override async Task OnInitializedAsync()
    {
        AppState.Assign(async () => await DrawAsync(false));

        await DrawAsync(true);
    }

    private async Task DrawAsync(bool firstRender)
    {
        if (!firstRender)
        {
            noInvestments = false;
            stakes.Clear();
            investments.Clear();

            StateHasChanged();
        }

        if (UserSettings.HasValidAddress())
        {
            await foreach (var item in Client.ListInvestmentsAsync())
            {
                investments.Add(item);
            }

            StateHasChanged();

            await foreach (var stake in Client.ListStakesAsync())
            {
                stakes.Add(stake, new List<ApiStakeEvent>());

                await foreach (var stakeEvent in Client.ListStakeEventsAsync(stake.Token.Symbol))
                {
                    stakes[stake].Add(stakeEvent);
                }

                StateHasChanged();
            }

            noInvestments = !stakes.Any() || !investments.Any();
        }
    }
}